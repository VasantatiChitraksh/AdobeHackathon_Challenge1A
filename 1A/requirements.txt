class MultilingualPDFParser:
    def __init__(self):
        self.heading_threshold = 0.7
        
    def extract_outline(self, pdf_path):
        """Main extraction method"""
        doc = fitz.open(pdf_path)
        
        # Extract all text spans with formatting
        spans = self.extract_formatted_spans(doc)
        
        # Detect headings with multilingual support
        headings = self.detect_headings(spans)
        
        # Get document title
        title = self.extract_title(doc, headings)
        
        doc.close()
        
        return {
            "title": title,
            "outline": headings
        }
    
    def extract_formatted_spans(self, doc):
        """Extract all spans with formatting information"""
        all_spans = []
        
        for page_num in range(doc.page_count):
            page = doc[page_num]
            blocks = page.get_text("dict")["blocks"]
            
            for block in blocks:
                if "lines" in block:
                    for line in block["lines"]:
                        for span in line["spans"]:
                            if span["text"].strip():
                                span_info = {
                                    "text": preprocess_multilingual_text(span["text"]),
                                    "size": span["size"],
                                    "font": span["font"],
                                    "flags": span["flags"],
                                    "page": page_num + 1,
                                    "bbox": span["bbox"]
                                }
                                all_spans.append(span_info)
        
        return all_spans
    
    def detect_headings(self, spans):
        """Main heading detection with multilingual support"""
        return classify_headings_multilingual(spans)
    
    def extract_title(self, doc, headings):
        """Extract document title"""
        # Try metadata first
        metadata = doc.metadata
        if metadata and metadata.get('title') and metadata['title'].strip():
            return metadata['title'].strip()
        
        # Use first H1 heading
        for heading in headings:
            if heading['level'] == 'H1':
                return heading['text']
        
        # Use first heading of any level
        if headings:
            return headings[0]['text']
        
        # Fallback to filename without extension
        return "Document"


def main():
    input_dir = "/app/input"
    output_dir = "/app/output"
    
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    parser = MultilingualPDFParser()
    
    # Check if input directory exists
    if not os.path.exists(input_dir):
        print(f"Input directory {input_dir} not found!")
        return
    
    # Process all PDF files in input directory
    pdf_files = [f for f in os.listdir(input_dir) if f.endswith('.pdf')]
    
    if not pdf_files:
        print("No PDF files found in input directory!")
        return
    
    print(f"Found {len(pdf_files)} PDF file(s) to process")
    
    for filename in pdf_files:
        pdf_path = os.path.join(input_dir, filename)
        output_filename = filename.replace('.pdf', '.json')
        output_path = os.path.join(output_dir, output_filename)
        
        print(f"Processing: {filename}")
        
        try:
            outline = parser.extract_outline(pdf_path)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(outline, f, ensure_ascii=False, indent=2)
            
            print(f"✓ Successfully processed {filename} -> {output_filename}")
            print(f"  Title: {outline['title']}")
            print(f"  Headings found: {len(outline['outline'])}")
            
        except Exception as e:
            print(f"✗ Error processing {filename}: {e}")
            import traceback
            traceback.print_exc()


if __name__ == "__main__":
    main()